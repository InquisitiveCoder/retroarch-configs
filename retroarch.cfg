# ===========
# Directories
# ===========

# NOTE: If you have an existing RetroArch installation, changing these
# settings will cause RetroArch to lose track of your saves.

# Group saves by game folder instead of by core.
# 
# Save files usually work across different emulators for the same
# console so there's not much of a reason to separate them by core.
# Another downside of grouping saves by core is that saves for the
# same console can be spread across multiple consoles, which makes it
# trickier to sync those files with other systems like MiSTer FPGA.
sort_savefiles_by_content_enable = "true"
sort_savefiles_enable = "false"

# Group save states by content directory in addition to core. This
# keeps things organized in multi-console emulators, e.g. Genesis Plus
# GX emulates both Sega Master System and Genesis, and both consoles
# have a game called Sonic the Hedgehog.
sort_savestates_by_content_enable = "true"
sort_savestates_enable = "true"

# Organize screenshots into subfolders.
sort_screenshots_by_content_enable = "true"

# =======
# Latency
# =======

# Default to vulkan since it's cross-platform and, unlike OpenGL,
# low latency settings work consistently.
video_driver = "vulkan"

## Runahead

# Reduce input lag by executing inputs X number of frames in the past.
# The number of frames is determined by the run_ahead_frames setting.
# 
# Preemptive Frames Mode is less CPU-intensive than other forms of
# runahead, since it only rolls back state when buttons are pressed.
# See: https://www.libretro.com/index.php/retroarch-1-15-0-release/
# 
# NOTE: This is not a mistake! Despite the GUI presenting Preemptive
# Frames Mode as an option for Run-Ahead, if run_ahead_enabled is true,
# the result is always Single Instance Mode or Double Instance Mode
# (depending on whether run_ahead_secondary_instance is true.)
run_ahead_enabled = "false"
preemptive_frames_enable = "true"

# Emulators for 8-bit and 16-bit consoles output video retroactively;
# the video for the frame that's currently being emulated can't be
# created until the next frame is run from start to finish and all
# scanline interrupts are executed. As a result, these emulators run
# 1 frame behind real hardware. Running ahead by 1 frame corrects this.
#
# Emulators for early 3D consoles don't suffer from this issue, but
# games on these consoles almost always have at least 2 frames of
# input lag (3 in the case of Sega Saturn) even on real hardware.
# Runahead thus helps bring the input lag of these consoles in line
# with that of a PC port.
# 
# Non-emulation cores (e.g. 2048, Cave Story) usually don't support
# runahead, so this setting is unlikely to have an adverse effect.
#
# This can be overridden on a per-game basis to handle games that have
# more input lag than the baseline for their console (e.g. due to
# running at half FPS.)
run_ahead_frames = "1"

## Frame Delay

# Frame Delay reduces input lag by delaying the start of the current
# frame, which increases the odds that inputs will be received on time.
# Automatic Frame Delay automatically reduces the delay amount if the
# FPS drops. This will offset lag from USB controllers.
video_frame_delay_auto = "true"

# A value of 0 causes the delay to start at 75% of a frame (~12 ms for
# 60Hz content) when Automatic Frame Delay is enabled.
video_frame_delay = "0"

## Video driver settings

### vulkan

# Double buffering
video_max_swapchain_images = "2"

# The vulkan driver always blocks until the frame is displayed,
# so no additional setting is needed.

### d3d11 and d3d12

# Don't queue additional frames.
video_max_frame_latency = "0"

# Block until the frame is displayed.
video_waitable_swapchains = "true"

### gl and glcore

# Block until the frame is displayed.
video_hard_sync = "true"

# Don't queue additional frames.
video_hard_sync_frames = "0"

## Misc latency settings

# Try to avoid the window manager.
video_fullscreen = "true"

# Threaded video worsens latency.
video_threaded = "false"

# Disable the compositor during fullscreen (Windows 7 and X11 only.)
video_disable_composition = "true"

# =============
# UI/UX changes
# =============

# Increase the timeout to give more time to read.
input_bind_timeout = "10"

# Always starting from the top when changing menus places menu items in
# predictable positions and allows nagivating by muscle memory.
menu_remember_selection = "0"

# USB controllers are easy to pull free accidentally,
# and wireless controllers can run out of battery.
pause_on_disconnect = "true"

# Use the system theme on Nintendo Switch (ozone GUI only)
menu_use_preferred_system_color_theme = "true"

# Pitch shift the sound instead of letting it crackle.
audio_fastforward_speedup = "true"

# Limit the speed to reduce the likelihood of fast-forwarding
# more than intended and keep the sped up audio tolerable.
fastforward_ratio = "1.500000"

# ===================
# Save state settings
# ===================

# Overwriting SRAM when loading state might silently roll back a user's
# save file and result in catastrophic progress loss.
block_sram_overwrite = "true"

# If you're running on an Android *phone*, change these to true.
# If you answer a phone call and RetroArch loses focus, Android may
# kill it to free up resources. These settings will create a save state
# whenever a game or RetroArch is closed, and load it automatically
# when the game is loaded. This will prevent your progress from being
# lost, but will result in 1 save state for every game you play.
# 
# Note that 5th gen console save states take up at least 1 MB, and
# using hardware renderers causes the save state's "thumbnail" to be
# a fullscreen screenshot in PNG format, adding another 1-2 MB. You
# can easily lose 100+ MB of disk space to this feature if you play
# lots of PS1, Saturn or N64 games.
savestate_auto_load = "false"
savestate_auto_save = "false"

# Showing a thumbnail greatly improves the user experience.
savestate_thumbnail_enable = "true"

# =====
# Video
# =====

video_shader_enable = "true"
